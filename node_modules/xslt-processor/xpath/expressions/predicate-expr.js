"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PredicateExpr = void 0;
var boolean_value_1 = require("../values/boolean-value");
var expression_1 = require("./expression");
var PredicateExpr = /** @class */ (function (_super) {
    __extends(PredicateExpr, _super);
    function PredicateExpr(expr) {
        var _this = _super.call(this) || this;
        _this.expr = expr;
        return _this;
    }
    PredicateExpr.prototype.evaluate = function (context) {
        var v = this.expr.evaluate(context);
        if (v.type == 'number') {
            // NOTE(mesch): Internally, position is represented starting with
            // 0, however in XPath position starts with 1. See functions
            // position() and last().
            return new boolean_value_1.BooleanValue(context.position == v.numberValue() - 1);
        }
        return new boolean_value_1.BooleanValue(v.booleanValue());
    };
    return PredicateExpr;
}(expression_1.Expression));
exports.PredicateExpr = PredicateExpr;
//# sourceMappingURL=predicate-expr.js.map