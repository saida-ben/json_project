export declare class XNode {
    id: number;
    attributes: XNode[];
    childNodes: XNode[];
    nodeType: any;
    nodeName: string;
    nodeValue: any;
    firstChild: XNode;
    lastChild: XNode;
    nextSibling: XNode;
    previousSibling: XNode;
    siblingPosition: number;
    ownerDocument: any;
    namespaceUri: any;
    prefix: string;
    localName: string;
    parentNode: XNode;
    outputNode: XNode;
    transformedAttributes: XNode[];
    transformedChildNodes: XNode[];
    transformedNodeType: any;
    transformedNodeName: string;
    transformedNodeValue: any;
    transformedFirstChild: XNode;
    transformedLastChild: XNode;
    transformedNextSibling: XNode;
    transformedPreviousSibling: XNode;
    transformedPrefix: any;
    transformedLocalName: string;
    transformedParentNode: XNode;
    visited: boolean;
    escape: boolean;
    static _unusedXNodes: any[];
    constructor(type: any, name: string, opt_value: any, opt_owner: any, opt_namespace?: any);
    /**
     * Node initialization. Called by the constructor and `recycle` method.
     * @param type The node type.
     * @param name The node name.
     * @param value The node value.
     * @param owner The node owner.
     * @param namespaceUri The node namespace.
     */
    init(type: any, name: string, value: string, owner: any, namespaceUri: any): void;
    protected qualifiedNameToParts(name: string): string[];
    protected domTraverseElements(node: any, opt_pre: any, opt_post: any): boolean;
    static recycle(node: any): void;
    static create(type: any, name: string, value: any, owner: any, namespace?: any): XNode;
    static clone(node: XNode, newOwner: XNode): XNode;
    appendChild(node: XNode): void;
    appendTransformedChild(node: XNode): void;
    replaceChild(newNode: any, oldNode: any): void;
    insertBefore(newNode: any, oldNode: any): void;
    removeChild(node: any): void;
    hasAttributes(): boolean;
    setAttribute(name: string, value: any): void;
    setTransformedAttribute(name: string, value: any): void;
    setAttributeNS(namespace: any, name: any, value: any): void;
    getAttributeValue(name: any): any;
    getAttributeNS(namespace: any, localName: any): any;
    hasAttribute(name: any): boolean;
    hasAttributeNS(namespace: any, localName: any): boolean;
    removeAttribute(name: any): void;
    removeAttributeNS(namespace: any, localName: any): void;
    getElementsByTagName(name: any): any[];
    getElementsByTagNameNS(namespace: any, localName: any): any[];
    getElementById(id: any): any;
    getAncestorByLocalName(localName: string): XNode | undefined;
    getAncestorById(id: number): XNode | undefined;
}
